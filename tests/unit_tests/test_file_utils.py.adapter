"""
Tests for file utility functions.

This module verifies that the file utility functions work correctly.
"""

import os
import sys
import json
import pytest
import tempfile
import shutil

# Add project root to the path for imports
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "../..")))

# Import from adapter instead of directly
from test_adapters.utils_adapter import (
    ensure_directory_exists,
    write_text_to_file,
    read_text_from_file,
    save_json,
    load_json
)


class TestFileUtils:
    """Test suite for file utility functions."""
    
    @pytest.fixture
    def temp_dir(self):
        """Create a temporary directory for testing."""
        temp_dir = tempfile.mkdtemp()
        yield temp_dir
        shutil.rmtree(temp_dir)
    
    def test_ensure_directory_exists_new_dir(self, temp_dir):
        """Test ensure_directory_exists creates a new directory."""
        new_dir_path = os.path.join(temp_dir, "new_directory")
        
        # Make sure the directory doesn't exist yet
        assert not os.path.exists(new_dir_path)
        
        # Create the directory
        ensure_directory_exists(new_dir_path)
        
        # Verify the directory now exists
        assert os.path.exists(new_dir_path)
        assert os.path.isdir(new_dir_path)
    
    def test_ensure_directory_exists_existing_dir(self, temp_dir):
        """Test ensure_directory_exists with an existing directory."""
        # Directory already exists
        assert os.path.exists(temp_dir)
        
        # Should not raise an error
        ensure_directory_exists(temp_dir)
        
        # Directory should still exist
        assert os.path.exists(temp_dir)
        assert os.path.isdir(temp_dir)
    
    def test_write_and_read_text_file(self, temp_dir):
        """Test writing to and reading from a text file."""
        file_path = os.path.join(temp_dir, "test_file.txt")
        content = "This is test content.\nWith multiple lines."
        
        # Write content to file
        write_text_to_file(file_path, content)
        
        # Verify file exists
        assert os.path.exists(file_path)
        
        # Read content back
        read_content = read_text_from_file(file_path)
        
        # Verify content matches
        assert read_content == content
    
    def test_write_text_to_nonexistent_dir(self, temp_dir):
        """Test writing to a file in a directory that doesn't exist yet."""
        nested_dir = os.path.join(temp_dir, "nested", "directory")
        file_path = os.path.join(nested_dir, "test_file.txt")
        content = "Test content"
        
        # Ensure the nested directory doesn't exist yet
        assert not os.path.exists(nested_dir)
        
        # Create the directory first
        ensure_directory_exists(nested_dir)
            
        # Write the file
        write_text_to_file(file_path, content)
        
        # Verify file exists and has correct content
        assert os.path.exists(file_path)
        assert read_text_from_file(file_path) == content
    
    def test_read_nonexistent_file(self):
        """Test reading from a file that doesn't exist."""
        nonexistent_file = "/tmp/this_file_does_not_exist.txt"
        
        # Make sure the file doesn't exist
        if os.path.exists(nonexistent_file):
            os.remove(nonexistent_file)
        
        # Attempting to read should raise an exception
        with pytest.raises(Exception):
            read_text_from_file(nonexistent_file)
    
    def test_save_and_load_json(self, temp_dir):
        """Test saving and loading JSON data."""
        json_path = os.path.join(temp_dir, "test_data.json")
        data = {
            "name": "Test",
            "value": 42,
            "nested": {
                "list": [1, 2, 3],
                "bool": True
            }
        }
        
        # Save JSON data
        save_json(json_path, data)
        
        # Verify file exists
        assert os.path.exists(json_path)
        
        # Load JSON data
        loaded_data = load_json(json_path)
        
        # Verify data matches
        assert loaded_data == data
        assert loaded_data["name"] == "Test"
        assert loaded_data["value"] == 42
        assert loaded_data["nested"]["list"] == [1, 2, 3]
        assert loaded_data["nested"]["bool"] is True
    
    def test_save_json_nonexistent_dir(self, temp_dir):
        """Test saving JSON to a directory that doesn't exist yet."""
        nested_dir = os.path.join(temp_dir, "nested_json", "directory")
        json_path = os.path.join(nested_dir, "test_data.json")
        data = {"key": "value"}
        
        # Ensure the nested directory doesn't exist yet
        assert not os.path.exists(nested_dir)
        
        # Create the directory first
        ensure_directory_exists(nested_dir)
            
        # Save the JSON
        save_json(json_path, data)
        
        # Verify file exists and has correct content
        assert os.path.exists(json_path)
        assert load_json(json_path) == data
    
    def test_load_nonexistent_json(self):
        """Test loading JSON from a file that doesn't exist."""
        nonexistent_json = "/tmp/this_json_does_not_exist.json"
        
        # Make sure the file doesn't exist
        if os.path.exists(nonexistent_json):
            os.remove(nonexistent_json)
        
        # Attempting to load should raise an exception
        with pytest.raises(Exception):
            load_json(nonexistent_json)
    
    def test_load_invalid_json(self, temp_dir):
        """Test loading invalid JSON data."""
        invalid_json_path = os.path.join(temp_dir, "invalid.json")
        
        # Create a file with invalid JSON
        with open(invalid_json_path, 'w') as f:
            f.write("{this is not valid JSON")
        
        # Attempting to load should raise an exception
        with pytest.raises(Exception):
            load_json(invalid_json_path)