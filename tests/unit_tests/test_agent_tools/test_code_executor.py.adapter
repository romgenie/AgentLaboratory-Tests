import pytest
import sys
import os
from unittest.mock import patch, MagicMock

# Add project root to the path for imports
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "../../..")))

# Import from the adapter instead of the original module
from test_adapters.code_executor_adapter import execute_code

class TestCodeExecutor:
    """Test suite for code execution functionality."""
    
    def test_execute_code_returns_dict(self):
        """Test that execute_code returns a dictionary with expected keys."""
        code = "print('Hello, world!')"
        result = execute_code(code)
        
        assert isinstance(result, dict)
        assert 'output' in result
        assert 'error' in result
        assert 'figures' in result
    
    def test_execute_code_with_timeout(self):
        """Test that execute_code accepts a timeout parameter."""
        code = "import time; time.sleep(0.1); print('Done')"
        result = execute_code(code, timeout=1)
        
        assert isinstance(result, dict)
        assert 'output' in result
    
    def test_execute_code_result_structure(self):
        """Test that execute_code results have the expected structure."""
        code = "print('Test')"
        result = execute_code(code)
        
        assert isinstance(result['output'], str)
        assert result['error'] is None or isinstance(result['error'], str)
        assert isinstance(result['figures'], list)
        
        # We don't expect any figures from the simple print test
        assert len(result['figures']) == 0
    
    def test_execute_code_captures_output(self):
        """Test that execute_code captures stdout output."""
        code = "print('Line 1\\nLine 2')"
        result = execute_code(code)
        
        assert "Line 1" in result['output']
        assert "Line 2" in result['output']
        assert result['error'] is None
    
    def test_execute_code_captures_error(self):
        """Test that execute_code captures errors correctly."""
        code = "raise ValueError('Test error')"
        result = execute_code(code)
        
        assert result['error'] is not None
        assert "ValueError: Test error" in result['error']
    
    def test_execute_code_with_matplotlib(self):
        """Test that execute_code captures matplotlib figures."""
        code = """
import matplotlib.pyplot as plt
plt.figure()
plt.plot([1, 2, 3], [4, 5, 6])
plt.title('Test Figure')
"""
        result = execute_code(code)
        
        assert result['error'] is None
        assert len(result['figures']) == 1
        assert isinstance(result['figures'][0], str)
        # Base64 encoded PNG should start with this
        assert result['figures'][0].startswith('iVBORw0KGgo') or len(result['figures'][0]) > 0